1.What fiel format is used for this binary? And what architecture is itcompiled for?
wc:     file format elf64-x86-64
architecture: i386:x86-64

2.What are some of the names of segment/sections you find?
Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400238  0000000000400238  00000238  2**0
                    CONTENTS, ALLOC, LOAD, READONLY, DATA
1 .note.ABI-tag 00000020  0000000000400254  0000000000400254  00000254  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
2 .note.gnu.build-id 00000024  0000000000400274  0000000000400274  00000274  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
3 .gnu.hash     0000001c  0000000000400298  0000000000400298  00000298  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
4 .dynsym       000000c0  00000000004002b8  00000000004002b8  000002b8  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
5 .dynstr       0000005a  0000000000400378  0000000000400378  00000378  2**0
CONTENTS, ALLOC, LOAD, READONLY, DATA
6 .gnu.version  00000010  00000000004003d2  00000000004003d2  000003d2  2**1
CONTENTS, ALLOC, LOAD, READONLY, DATA
7 .gnu.version_r 00000020  00000000004003e8  00000000004003e8  000003e8  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
8 .rela.dyn     00000018  0000000000400408  0000000000400408  00000408  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
9 .rela.plt     000000a8  0000000000400420  0000000000400420  00000420  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
10 .init         0000001a  00000000004004c8  00000000004004c8  000004c8  2**2
CONTENTS, ALLOC, LOAD, READONLY, CODE
11 .plt          00000080  00000000004004f0  00000000004004f0  000004f0  2**4
CONTENTS, ALLOC, LOAD, READONLY, CODE
12 .text         00000292  0000000000400570  0000000000400570  00000570  2**4
CONTENTS, ALLOC, LOAD, READONLY, CODE
13 .fini         00000009  0000000000400804  0000000000400804  00000804  2**2
CONTENTS, ALLOC, LOAD, READONLY, CODE
14 .rodata       00000023  0000000000400810  0000000000400810  00000810  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
15 .eh_frame_hdr 00000034  0000000000400834  0000000000400834  00000834  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
16 .eh_frame     000000f4  0000000000400868  0000000000400868  00000868  2**3
CONTENTS, ALLOC, LOAD, READONLY, DATA
17 .init_array   00000008  0000000000600e10  0000000000600e10  00000e10  2**3
CONTENTS, ALLOC, LOAD, DATA
18 .fini_array   00000008  0000000000600e18  0000000000600e18  00000e18  2**3
CONTENTS, ALLOC, LOAD, DATA
19 .jcr          00000008  0000000000600e20  0000000000600e20  00000e20  2**3
CONTENTS, ALLOC, LOAD, DATA
20 .dynamic      000001d0  0000000000600e28  0000000000600e28  00000e28  2**3
CONTENTS, ALLOC, LOAD, DATA
21 .got          00000008  0000000000600ff8  0000000000600ff8  00000ff8  2**3
CONTENTS, ALLOC, LOAD, DATA
22 .got.plt      00000050  0000000000601000  0000000000601000  00001000  2**3
CONTENTS, ALLOC, LOAD, DATA
23 .data         00000010  0000000000601050  0000000000601050  00001050  2**3
CONTENTS, ALLOC, LOAD, DATA
24 .bss          00000008  0000000000601060  0000000000601060  00001060  2**0
ALLOC
25 .comment      00000056  0000000000000000  0000000000000000  00001060  2**0
CONTENTS, READONLY
26 .debug_aranges 00000030  0000000000000000  0000000000000000  000010b6  2**0
CONTENTS, READONLY, DEBUGGING
27 .debug_info   0000038f  0000000000000000  0000000000000000  000010e6  2**0
CONTENTS, READONLY, DEBUGGING
28 .debug_abbrev 000000ee  0000000000000000  0000000000000000  00001475  2**0
CONTENTS, READONLY, DEBUGGING
29 .debug_line   000000ff  0000000000000000  0000000000000000  00001563  2**0
CONTENTS, READONLY, DEBUGGING
30 .debug_str    0000025b  0000000000000000  0000000000000000  00001662  2**0
CONTENTS, READONLY, DEBUGGING


3.What segment/section cocntains main(the function) and what is the address of main?(It should be the same as what you saw in gdb).
000000000040065d <main>:
  40065d:	55                   	push   %rbp

4.Do you see the stack segment anywhere? What about heap?Explain.
Neither.
Stack and heap are runtime concepts, which have no pre-baked segment in the executable. Since they are just scratch space used dynamically, there's no reason why they should be present in the executable; they are created automatically at process (heap) or thread (stack) creation. 

